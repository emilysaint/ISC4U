################################################################################
# Name: Emily Saint
# Course: ICS4U
# File: saint_emily_Assign03.py
# Description:
# A program is able to decode/display the message in Challenge3-1.bmp,
# Challenge3-2.bmp, and Challenge3-3.bmp. Uses file analysis to loop
# through, modify, and gather information about the bytes
# History:
# 2021.22.03 CREATION
# 2021.22.03 main read bytes loop creation
# 2021.23.03 modifications to main loop of offset if/else
# 2021.24.03 implementation of the divide chunks and the flatten functions
# 2021.25.03 addition of pixel colour change and junk data input/output
# 2021.26.03 bit depth selection. modifications to pixel lists. 
# 2021.27.03 display of headers and footers. assignment in-line notes 
# 2021.28.03 assignment details, file header information, and bit masking
# 2021.28.03 FINAL
# 2021.30.03 Proper shell header display
# Bibliography:
# https://stackoverflow.com/questions/312443/how-do-you-split-
#   a-list-into-evenly-sized-chunks
# https://stackoverflow.com/questions/2158395/flatten-an-
#   irregular-list-of-lists
################################################################################

# IMPORT TKINTER
# for file directory display and Tkinter window
import tkinter
from tkinter.filedialog import askopenfile
from tkinter import *
from tkinter import filedialog as fd

# CREATES NESTED LISTS WITHIN A LARGER LIST
def divide_chunks(l, n):
    # passes the list through, divides it in chunks
    # with n amount of items in chunk starting with the
    # first item in row
    # ie: the row into chunks of three bytes
    # looping till length l
    for i in range(0, len(l), n):\
        # returns the chuncked list using yield
        yield l[i:i + n]
    #END FOR
#END DIVIDE_CHUNKS()

# FLATTENS NESTED LISTS INTO A SINGLE LIST
def flatten(L):
    for l in L:
        # returns if flattening passed through list is possible (return == True)
        if isinstance(l, list):
            # returns the flattened list using yield
            yield from flatten(l)
        else:
            # returns the flattened list using yield
            yield l
        #END IF
    #END FOR
#END FLATTEN()

################################################################################

#### MAIN ALGORITHM ####

validAgain = True
while validAgain == True:
    # SET UP Tkinter POP UP WINDOW
    gui = Tk()
    # pop up window size
    gui.geometry("370x70") 
    # pop up window name
    gui.title("Python select file dialog (File Directory)") 
    # pop up window contents
    a = Label(gui ,text="Saint_Emily_assign03 \nFile directory will pop up. \nPlease select a BMP file. \nAn image will appear only if input file selected is a BMP.")
    a.grid(row=0,column = 0)

    # OPEN INPUT AND OUTPUT FILE
    # get input file selected from file directory pop up and open it in
    # read byte mode
    # open file directory to select input file
    filename = fd.askopenfilename()
    f = open(filename, 'rb')
    # create output file open it in write byte mode
    outFile = open("Saint_Emily_assign03_outputFile.bmp", 'wb')

    # HEADER OUTPUT IN SHELL
    print("         Assignment 03 - ICS4U")
    print("By: Emily Saint       Date: Mar 27, 2021\n")
    print("Chosen file and location: %s\n" %filename)

    # SET MESSAGE COLOUR
    # ask user for message colour and verify input is correct
    valid = False
    # keep looping untill valid input
    while valid == False:
        colour = input("Set hidden message colour to be (yellow/blue/green/black/red/white) ")
        colour = colour.lower()
        # accept input only if its a valid colour string
        if colour == "yellow" or colour == "blue" or colour == "green" or colour == "black" or colour == "red" or colour == "white":
            valid = True
        else:
            print("Invalid input")
            valid = False 
        #END IF
    #END WHILE  
    print("Message colour has been set to ", colour)

    # SET BIT DEPTH
    # ask user for bit depth and verify input is correct
    valid = False
    # keep looping untill valid input
    while valid == False:
        bitDepth = input("Set bit depth to be (1/4/8/16/24/32) ")
        # accept input only if its a valid bit depth string
        if bitDepth == "1" or bitDepth == "4" or bitDepth == "8" or bitDepth == "16" or bitDepth == "24" or bitDepth == "32":
            bitDepth = int(bitDepth)
            valid = True
        else:
            print("Invalid input")
            valid = False
        #END IF
    #END WHILE
    print("Bit depth is set to (decimal value) %2d \n" %bitDepth)


    # set variables and empty lists for initial set up of the while loop 
    offset = 0
    byteList = []
    imageWidth = []
    byte = True
    # read byte 1 for initial set up of the while loop 
    byte = f.read(1)
    # WHILE LOOP TO READ ALL THE BYTES IN FILE
    while byte:
        # turns character into the int that represents that character
        some_byte = ord(byte) 

        # if bytes are apart of the header ... 
        if offset < 0x36:
            # if changing actual bit depth the code would have the 
            # addition of the lines marked with a ##
            ## if offset == 0x1c:
            ###   outFile.write(bytes([bitDepth]))
            
            # read in width of image from 0x12 0x13 0x14 0x15 for width in pixels
            ## the line below this would be an elif instead of an if
            if offset == 0x12 or offset == 0x13 or offset == 0x14 or offset == 0x15: 
                # add all width information to list and output to file
                imageWidth.append(str(some_byte))
                outFile.write(bytes([some_byte]))
            # print out byte if not done so already by if and elif
            else:
                outFile.write(bytes([some_byte]))
            #END
        #END 
                
        # when done reading width of header, join items in the width
        # information to list together. Then convert it into an
        # interger to the base 16 to get its hexidecimal value
        if offset == 0x15:
            imageWidthHex = "".join(imageWidth)
            imageWidthHex = int(imageWidthHex, 16)
        #END IF
            
        # add all colour bytes to a list
        if offset >= 0x36:
            byteList.append(some_byte)
        #END IF

        # read next byte in file before returing to the begining of loop
        byte = f.read(1)
        # increase offset by one before returing to the begining of loop
        offset += 1
    #END OF WHILE


    # number of bytes per row in image
    numBytesInRow = 3*imageWidthHex
    # amount of junk bytes at the end of each row
    numBytesJunk = (4 - ((numBytesInRow)% 4)) % 4
    # total abount of bytes in row
    totalBytesInRow = numBytesInRow + numBytesJunk
    # list containing all bytes in file with nested lists
    # containg the all bytes per row and junk data
    # ie: [[1, 2, 3, 4, 5, 6, 0, 0], [7, 8, 9, 1, 2, 3, 0, 0] ... ]
    newByteList = list(divide_chunks(byteList, totalBytesInRow))

    # empty list for initial set up of the while loop 
    image_in_rows_and_pixels = []
    # FOR LOOP TO LOOP THROUGH THE ROWS IN THE NEWBYTELIST
    for row in newByteList:
        # divide each of the row lists into three bytes
        # ie: [[1, 2, 3], [4, 5, 6], .... [7, 8]]
        pixels_in_row = list(divide_chunks(row, 3))
        # remove all junk data from rows
        if numBytesJunk > 0:
            # now the list will look like this: [[1, 2, 3], [4, 5, 6]]
            pixels_in_row = pixels_in_row[:-1]

        # new list of all rows without junk data
        # ie: [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]
        image_in_rows_and_pixels.append(pixels_in_row)

    # FOR LOOP TO CHANGE MESSAGE COLOUR
    # loop through rows first
    for row in image_in_rows_and_pixels:
        # loop through pixels second 
        for item in row:
            needToChangeColor = False
            # loop through bytes third
            for value in item:
                # value lists will contain rgb information
                # ie: [blue, green, red] ->  [ 1, 1, 225]
                # find the least sig bit
                mod = 0x1 & int(value)

                # if the mod is equal to zero then we need to change colour
                # of pixel
                if mod == 0:
                    needToChangeColor = True
                #END IF
            #END FOR

            # when it has been decided to change colour of pixel change
            # whole item in the row
            if needToChangeColor == True:
                # change to pixel to white
                if colour == "white":
                    item[0] = 255
                    item[1] = 255
                    item[2] = 255
                # change to pixel to black
                elif colour == "black":
                    item[0] = 0
                    item[1] = 0
                    item[2] = 0
                # change to pixel to blue
                elif colour == "blue":
                    item[0] = 255
                    item[1] = 0
                    item[2] = 0
                # change to pixel to green
                elif colour == "green":
                    item[0] = 0
                    item[1] = 255
                    item[2] = 0
                # change to pixel to yellow
                elif colour == "yellow":
                    item[0] = 0
                    item[1] = 255
                    item[2] = 255
                # change to pixel to red
                elif colour == "red":
                    item[0] = 0
                    item[1] = 0
                    item[2] = 255
                #END IF
            #END IF
        #END FOR
    #END FOR

    # ADDING JUNK DATA
    # adding juck data back in is necessary so the output file opens 
    if numBytesJunk > 0:
        for row in image_in_rows_and_pixels:
            # add as much junk data to satisfy row length
            row.extend([[0]*numBytesJunk])
        #END FOR
    #END IF

    # FLATTEN LIST
    # get rid of the nested lists
    joinedOutlist = list(flatten(image_in_rows_and_pixels))

    # OUPUT MODIFIED BYTES TO FILE
    # loops through all items in the joinedOutlist for writing in output file 
    for item in joinedOutlist:
        outFile.write(bytes([item]))
    #END FOR

    # CLOSE ALL FILES
    f.close()
    outFile.close()

    # OUTPUT FILE HEADER INFORMATION IN SHELL
    # open output file in read byte mode
    outFile = open("Saint_Emily_assign03_outputFile.bmp", 'rb')
    # set empty lists and variables for header loop
    headerSize = []
    bitMapWidth = []
    bitMapHeight = []
    colourPlanes = []
    numBitsPerPix = []
    compression = []
    imageSize = []
    horizRes = []
    vertRes = []
    numColours = []
    numimportantColours = []
    bitDepth = str(bitDepth)
    offset = 0

    # READ HEADER INFORMATION
    # loop through each byte increasing by one each time
    for line in range(40):
        # read one byte
        byte = outFile.read(1)
        # convert byte to integer
        some_byte = ord(byte)
        # convert byte to string
        some_byte_str = "%02x" % some_byte

        # if condition is true append byte string to appropriate list
        # heder size
        if offset == 0x0e or offset == 0x0d:
            headerSize.append(some_byte_str)
        # image width
        elif offset == 0x12 or offset == 0x13 or offset == 0x14 or offset == 0x15:
            bitMapWidth.append(some_byte_str)
        # image height
        elif offset == 0x16 or offset == 0x17 or offset == 0x18 or offset == 0x19:
            bitMapHeight.append(some_byte_str)
        # colour planes 
        elif offset == 0x1a or offset == 0x1b :
            colourPlanes.append(some_byte_str)
        # compression magnitude
        elif offset == 0x1e or offset == 0x1f:
            compression.append(some_byte_str)

    ##    # If header byte information was longer we would include the code commented out below
    ##    # horizontal resolution
    ##    elif offset == 0x26 or offset == 0x27 or offset == 0x28 or offset == 0x29:
    ##        horizRes.append(some_byte_str)
    ##    # vertical resolution
    ##    elif offset == 0x2a or offset == 0x2b or offset == 0x2c or offset == 0x2d:
    ##        vertRes.append(some_byte_str)
    ##    # number of colours
    ##    elif offset == 0x2e or offset == 0x2f:
    ##        numColours.append(some_byte_str)
    ##    # number of important colours
    ##    elif offset == 0x32 or offset == 0x33 or offset == 0x34 or offset == 0x35:
    ##        numimportantColours.append(some_byte_str)

        # image size
        # conversion to correct place value of base ten
        elif offset == 0x22:
            imageSize.append(some_byte_str)
            some_byte = some_byte * 0x10**0
        elif offset == 0x23:
            imageSize.append(some_byte_str)
            some_byte = some_byte * 0x10**2
        elif offset == 0x24:
            imageSize.append(some_byte_str)
            some_byte = some_byte * 0x10**4
        elif offset == 0x25:
            imageSize.append(some_byte_str)
            some_byte = some_byte * 0x10**6
        # END IF

        # increase offet by one for looping 
        offset = offset + 1
    # END FOR


    # PRINT HEADER INFORMATION TO SHELL
    print("\nHeader Information in decimal values")

    # For all sections below:
    # reverse the list so least sig bit goes last
    # join the list for full hex number
    # change to decimal number by using base 16
    # print decimal in base 10

    # heder size
    headerSize.reverse() 
    full_hex_offset = "".join(headerSize)
    headerSizeDeci = int(full_hex_offset, 16)
    print("header size:", headerSizeDeci)

    # image size
    imageSize.reverse()
    full_hex_offset = "".join(imageSize)
    file_size_deci = int(full_hex_offset, 16)
    print("file size:", file_size_deci)

    # image height
    bitMapHeight.reverse()
    full_hex_offset = "".join(bitMapHeight)
    bitMapHeightDeci = int(full_hex_offset, 16)
    print("image height:", bitMapHeightDeci)

    # image width
    bitMapWidth.reverse()
    full_hex_offset = "".join(bitMapWidth)
    bitMapWidthDeci = int(full_hex_offset, 16)
    print("image width:", bitMapWidthDeci)

    # colour planes
    colourPlanes.reverse()
    full_hex_offset = "".join(colourPlanes)
    colourPlanesDeci = int(full_hex_offset, 16)
    print("colour planes:", colourPlanesDeci)

    # number of bytes per pixel
    # already in decimal value, no need for conversion
    print("number of bytes per pixel:", bitDepth)

    # compression magnitude
    compression.reverse()
    full_hex_offset = "".join(compression)
    compressionDeci = int(full_hex_offset, 16)
    print("compression magnitude:", compressionDeci)

    ### If header byte information was longer we would include the code commented out below
    ##print("horizRes", horizRes)
    ##horizRes.reverse()
    ##full_hex_offset = "".join(horizRes)
    ##horizResDeci = int(full_hex_offset, 16)
    ##print("Horizontal resolution:", horizResDeci)
    ##
    ##print("vertRes", vertRes)
    ##vertRes.reverse()
    ##full_hex_offset = "".join(vertRes)
    ##vertResDeci = int(full_hex_offset, 16)
    ##print("Vertical resolution:", vertResDeci)
    ##
    ##print("numColours", numColours)
    ##numColours.reverse()
    ##full_hex_offset = "".join(numColours)
    ##numColoursDeci = int(full_hex_offset, 16)
    ##print("Number of colours:", numColoursDeci)
    ##
    ##print("numimportantColours", numimportantColours)
    ##numimportantColours.reverse()
    ##full_hex_offset = "".join(numimportantColours)
    ##numimportantColoursDeci = int(full_hex_offset, 16)
    ##print("Number of colours:", numimportantColoursDeci)

    # CLOSE OUTPUT FILE
    outFile.close()

    # FOOTER OUTPUT IN SHELL
    print("\nThe secret message has been decoded. See file directory.")
    print ()

    # USER WANTS TO GO AGAIN?
    valid = False
    # keep looping untill valid input
    while valid == False:
        again = input("Choose another file (y/n) ")
        # accept input only if its a valid bit depth string
        if again == "y" or again == "n":
            if again == "n":
                print("You have now exited the program.")
                valid = True
                validAgain = False
            elif again == "y":
                print("File directory will pop up again")
                valid = True
            #END IF
        else:
            print("Invalid input")
            valid = False
        #END IF
    print ()
    #END WHILE
#END WHILE

#### END OF ALGORITHM ###
